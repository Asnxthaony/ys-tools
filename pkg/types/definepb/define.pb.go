// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.3
// source: define.proto

package definepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AccountType int32

const (
	AccountType_ACCOUNT_MIHOYO_GUEST AccountType = 0
	AccountType_ACCOUNT_MIHOYO       AccountType = 1
	AccountType_ACCOUNT_XIAOMI       AccountType = 11
	AccountType_ACCOUNT_COOLPAD      AccountType = 12
	AccountType_ACCOUNT_YYB          AccountType = 13
	AccountType_ACCOUNT_BILI         AccountType = 14
	AccountType_ACCOUNT_HUAWEI       AccountType = 15
	AccountType_ACCOUNT_MEIZU        AccountType = 16
	AccountType_ACCOUNT_360          AccountType = 17
	AccountType_ACCOUNT_OPPO         AccountType = 18
	AccountType_ACCOUNT_VIVO         AccountType = 19
	AccountType_ACCOUNT_UC           AccountType = 20
	AccountType_ACCOUNT_WANDOJIA     AccountType = 21
	AccountType_ACCOUNT_LENOVO       AccountType = 22
	AccountType_ACCOUNT_JINLI        AccountType = 23
	AccountType_ACCOUNT_BAIDU        AccountType = 25
	AccountType_ACCOUNT_DANGLE       AccountType = 26
)

// Enum value maps for AccountType.
var (
	AccountType_name = map[int32]string{
		0:  "ACCOUNT_MIHOYO_GUEST",
		1:  "ACCOUNT_MIHOYO",
		11: "ACCOUNT_XIAOMI",
		12: "ACCOUNT_COOLPAD",
		13: "ACCOUNT_YYB",
		14: "ACCOUNT_BILI",
		15: "ACCOUNT_HUAWEI",
		16: "ACCOUNT_MEIZU",
		17: "ACCOUNT_360",
		18: "ACCOUNT_OPPO",
		19: "ACCOUNT_VIVO",
		20: "ACCOUNT_UC",
		21: "ACCOUNT_WANDOJIA",
		22: "ACCOUNT_LENOVO",
		23: "ACCOUNT_JINLI",
		25: "ACCOUNT_BAIDU",
		26: "ACCOUNT_DANGLE",
	}
	AccountType_value = map[string]int32{
		"ACCOUNT_MIHOYO_GUEST": 0,
		"ACCOUNT_MIHOYO":       1,
		"ACCOUNT_XIAOMI":       11,
		"ACCOUNT_COOLPAD":      12,
		"ACCOUNT_YYB":          13,
		"ACCOUNT_BILI":         14,
		"ACCOUNT_HUAWEI":       15,
		"ACCOUNT_MEIZU":        16,
		"ACCOUNT_360":          17,
		"ACCOUNT_OPPO":         18,
		"ACCOUNT_VIVO":         19,
		"ACCOUNT_UC":           20,
		"ACCOUNT_WANDOJIA":     21,
		"ACCOUNT_LENOVO":       22,
		"ACCOUNT_JINLI":        23,
		"ACCOUNT_BAIDU":        25,
		"ACCOUNT_DANGLE":       26,
	}
)

func (x AccountType) Enum() *AccountType {
	p := new(AccountType)
	*p = x
	return p
}

func (x AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[0].Descriptor()
}

func (AccountType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[0]
}

func (x AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountType.Descriptor instead.
func (AccountType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{0}
}

type ChannelIdType int32

const (
	ChannelIdType_CHANNEL_ID_NONE    ChannelIdType = 0
	ChannelIdType_CHANNEL_ID_MIHOYO  ChannelIdType = 1
	ChannelIdType_CHANNEL_ID_XIAOMI  ChannelIdType = 11
	ChannelIdType_CHANNEL_ID_COOLPAD ChannelIdType = 12
	ChannelIdType_CHANNEL_ID_YYB     ChannelIdType = 13
	ChannelIdType_CHANNEL_ID_BILI    ChannelIdType = 14
	ChannelIdType_CHANNEL_ID_HUAWEI  ChannelIdType = 15
	ChannelIdType_CHANNEL_ID_MEIZU   ChannelIdType = 16
	ChannelIdType_CHANNEL_ID_360     ChannelIdType = 17
	ChannelIdType_CHANNEL_ID_OPPO    ChannelIdType = 18
	ChannelIdType_CHANNEL_ID_VIVO    ChannelIdType = 19
	ChannelIdType_CHANNEL_ID_UC      ChannelIdType = 20
	ChannelIdType_CHANNEL_ID_LENOVO  ChannelIdType = 22
	ChannelIdType_CHANNEL_ID_JINLI   ChannelIdType = 23
	ChannelIdType_CHANNEL_ID_BAIDU   ChannelIdType = 25
	ChannelIdType_CHANNEL_ID_DANGLE  ChannelIdType = 26
)

// Enum value maps for ChannelIdType.
var (
	ChannelIdType_name = map[int32]string{
		0:  "CHANNEL_ID_NONE",
		1:  "CHANNEL_ID_MIHOYO",
		11: "CHANNEL_ID_XIAOMI",
		12: "CHANNEL_ID_COOLPAD",
		13: "CHANNEL_ID_YYB",
		14: "CHANNEL_ID_BILI",
		15: "CHANNEL_ID_HUAWEI",
		16: "CHANNEL_ID_MEIZU",
		17: "CHANNEL_ID_360",
		18: "CHANNEL_ID_OPPO",
		19: "CHANNEL_ID_VIVO",
		20: "CHANNEL_ID_UC",
		22: "CHANNEL_ID_LENOVO",
		23: "CHANNEL_ID_JINLI",
		25: "CHANNEL_ID_BAIDU",
		26: "CHANNEL_ID_DANGLE",
	}
	ChannelIdType_value = map[string]int32{
		"CHANNEL_ID_NONE":    0,
		"CHANNEL_ID_MIHOYO":  1,
		"CHANNEL_ID_XIAOMI":  11,
		"CHANNEL_ID_COOLPAD": 12,
		"CHANNEL_ID_YYB":     13,
		"CHANNEL_ID_BILI":    14,
		"CHANNEL_ID_HUAWEI":  15,
		"CHANNEL_ID_MEIZU":   16,
		"CHANNEL_ID_360":     17,
		"CHANNEL_ID_OPPO":    18,
		"CHANNEL_ID_VIVO":    19,
		"CHANNEL_ID_UC":      20,
		"CHANNEL_ID_LENOVO":  22,
		"CHANNEL_ID_JINLI":   23,
		"CHANNEL_ID_BAIDU":   25,
		"CHANNEL_ID_DANGLE":  26,
	}
)

func (x ChannelIdType) Enum() *ChannelIdType {
	p := new(ChannelIdType)
	*p = x
	return p
}

func (x ChannelIdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelIdType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[1].Descriptor()
}

func (ChannelIdType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[1]
}

func (x ChannelIdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelIdType.Descriptor instead.
func (ChannelIdType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{1}
}

type LanguageType int32

const (
	LanguageType_LANGUAGE_NONE LanguageType = 0
	LanguageType_LANGUAGE_EN   LanguageType = 1  // 英语
	LanguageType_LANGUAGE_SC   LanguageType = 2  // 简体中文
	LanguageType_LANGUAGE_TC   LanguageType = 3  // 繁体中文
	LanguageType_LANGUAGE_FR   LanguageType = 4  // 法语
	LanguageType_LANGUAGE_DE   LanguageType = 5  // 德语
	LanguageType_LANGUAGE_ES   LanguageType = 6  // 西班牙语
	LanguageType_LANGUAGE_PT   LanguageType = 7  // 葡萄牙语
	LanguageType_LANGUAGE_RU   LanguageType = 8  // 俄语
	LanguageType_LANGUAGE_JP   LanguageType = 9  // 日语
	LanguageType_LANGUAGE_KR   LanguageType = 10 // 韩语
	LanguageType_LANGUAGE_TH   LanguageType = 11 // 泰语
	LanguageType_LANGUAGE_VN   LanguageType = 12 // 越南语
	LanguageType_LANGUAGE_ID   LanguageType = 13 // 印尼语
	LanguageType_LANGUAGE_TR   LanguageType = 14 // 土耳其语
	LanguageType_LANGUAGE_IT   LanguageType = 15 // 意大利语
)

// Enum value maps for LanguageType.
var (
	LanguageType_name = map[int32]string{
		0:  "LANGUAGE_NONE",
		1:  "LANGUAGE_EN",
		2:  "LANGUAGE_SC",
		3:  "LANGUAGE_TC",
		4:  "LANGUAGE_FR",
		5:  "LANGUAGE_DE",
		6:  "LANGUAGE_ES",
		7:  "LANGUAGE_PT",
		8:  "LANGUAGE_RU",
		9:  "LANGUAGE_JP",
		10: "LANGUAGE_KR",
		11: "LANGUAGE_TH",
		12: "LANGUAGE_VN",
		13: "LANGUAGE_ID",
		14: "LANGUAGE_TR",
		15: "LANGUAGE_IT",
	}
	LanguageType_value = map[string]int32{
		"LANGUAGE_NONE": 0,
		"LANGUAGE_EN":   1,
		"LANGUAGE_SC":   2,
		"LANGUAGE_TC":   3,
		"LANGUAGE_FR":   4,
		"LANGUAGE_DE":   5,
		"LANGUAGE_ES":   6,
		"LANGUAGE_PT":   7,
		"LANGUAGE_RU":   8,
		"LANGUAGE_JP":   9,
		"LANGUAGE_KR":   10,
		"LANGUAGE_TH":   11,
		"LANGUAGE_VN":   12,
		"LANGUAGE_ID":   13,
		"LANGUAGE_TR":   14,
		"LANGUAGE_IT":   15,
	}
)

func (x LanguageType) Enum() *LanguageType {
	p := new(LanguageType)
	*p = x
	return p
}

func (x LanguageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LanguageType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[2].Descriptor()
}

func (LanguageType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[2]
}

func (x LanguageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LanguageType.Descriptor instead.
func (LanguageType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{2}
}

type PlatformType int32

const (
	PlatformType_EDITOR                   PlatformType = 0
	PlatformType_IOS                      PlatformType = 1
	PlatformType_ANDROID                  PlatformType = 2
	PlatformType_PC                       PlatformType = 3
	PlatformType_PS4                      PlatformType = 4
	PlatformType_SERVER                   PlatformType = 5
	PlatformType_CLOUD_ANDROID            PlatformType = 6
	PlatformType_CLOUD_IOS                PlatformType = 7
	PlatformType_PS5                      PlatformType = 8
	PlatformType_CLOUD_WEB                PlatformType = 9
	PlatformType_CLOUD_TV                 PlatformType = 10
	PlatformType_CLOUD_MAC                PlatformType = 11
	PlatformType_CLOUD_PC                 PlatformType = 12
	PlatformType_CLOUD_THIRD_PARTY_MOBILE PlatformType = 13
	PlatformType_CLOUD_THIRD_PARTY_PC     PlatformType = 14
)

// Enum value maps for PlatformType.
var (
	PlatformType_name = map[int32]string{
		0:  "EDITOR",
		1:  "IOS",
		2:  "ANDROID",
		3:  "PC",
		4:  "PS4",
		5:  "SERVER",
		6:  "CLOUD_ANDROID",
		7:  "CLOUD_IOS",
		8:  "PS5",
		9:  "CLOUD_WEB",
		10: "CLOUD_TV",
		11: "CLOUD_MAC",
		12: "CLOUD_PC",
		13: "CLOUD_THIRD_PARTY_MOBILE",
		14: "CLOUD_THIRD_PARTY_PC",
	}
	PlatformType_value = map[string]int32{
		"EDITOR":                   0,
		"IOS":                      1,
		"ANDROID":                  2,
		"PC":                       3,
		"PS4":                      4,
		"SERVER":                   5,
		"CLOUD_ANDROID":            6,
		"CLOUD_IOS":                7,
		"PS5":                      8,
		"CLOUD_WEB":                9,
		"CLOUD_TV":                 10,
		"CLOUD_MAC":                11,
		"CLOUD_PC":                 12,
		"CLOUD_THIRD_PARTY_MOBILE": 13,
		"CLOUD_THIRD_PARTY_PC":     14,
	}
)

func (x PlatformType) Enum() *PlatformType {
	p := new(PlatformType)
	*p = x
	return p
}

func (x PlatformType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlatformType) Descriptor() protoreflect.EnumDescriptor {
	return file_define_proto_enumTypes[3].Descriptor()
}

func (PlatformType) Type() protoreflect.EnumType {
	return &file_define_proto_enumTypes[3]
}

func (x PlatformType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlatformType.Descriptor instead.
func (PlatformType) EnumDescriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{3}
}

type RegionSimpleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Type        string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	DispatchUrl string `protobuf:"bytes,4,opt,name=dispatch_url,json=dispatchUrl,proto3" json:"dispatch_url,omitempty"`
}

func (x *RegionSimpleInfo) Reset() {
	*x = RegionSimpleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionSimpleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionSimpleInfo) ProtoMessage() {}

func (x *RegionSimpleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionSimpleInfo.ProtoReflect.Descriptor instead.
func (*RegionSimpleInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{0}
}

func (x *RegionSimpleInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegionSimpleInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RegionSimpleInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RegionSimpleInfo) GetDispatchUrl() string {
	if x != nil {
		return x.DispatchUrl
	}
	return ""
}

type QueryRegionListHttpRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode                     int32               `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	RegionList                  []*RegionSimpleInfo `protobuf:"bytes,2,rep,name=region_list,json=regionList,proto3" json:"region_list,omitempty"`
	ClientSecretKey             []byte              `protobuf:"bytes,5,opt,name=client_secret_key,json=clientSecretKey,proto3" json:"client_secret_key,omitempty"`
	ClientCustomConfigEncrypted []byte              `protobuf:"bytes,6,opt,name=client_custom_config_encrypted,json=clientCustomConfigEncrypted,proto3" json:"client_custom_config_encrypted,omitempty"`
	EnableLoginPc               bool                `protobuf:"varint,7,opt,name=enable_login_pc,json=enableLoginPc,proto3" json:"enable_login_pc,omitempty"`
}

func (x *QueryRegionListHttpRsp) Reset() {
	*x = QueryRegionListHttpRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRegionListHttpRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRegionListHttpRsp) ProtoMessage() {}

func (x *QueryRegionListHttpRsp) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRegionListHttpRsp.ProtoReflect.Descriptor instead.
func (*QueryRegionListHttpRsp) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{1}
}

func (x *QueryRegionListHttpRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *QueryRegionListHttpRsp) GetRegionList() []*RegionSimpleInfo {
	if x != nil {
		return x.RegionList
	}
	return nil
}

func (x *QueryRegionListHttpRsp) GetClientSecretKey() []byte {
	if x != nil {
		return x.ClientSecretKey
	}
	return nil
}

func (x *QueryRegionListHttpRsp) GetClientCustomConfigEncrypted() []byte {
	if x != nil {
		return x.ClientCustomConfigEncrypted
	}
	return nil
}

func (x *QueryRegionListHttpRsp) GetEnableLoginPc() bool {
	if x != nil {
		return x.EnableLoginPc
	}
	return false
}

type ForceUpdateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForceUpdateUrl string `protobuf:"bytes,1,opt,name=force_update_url,json=forceUpdateUrl,proto3" json:"force_update_url,omitempty"`
}

func (x *ForceUpdateInfo) Reset() {
	*x = ForceUpdateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceUpdateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceUpdateInfo) ProtoMessage() {}

func (x *ForceUpdateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceUpdateInfo.ProtoReflect.Descriptor instead.
func (*ForceUpdateInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{2}
}

func (x *ForceUpdateInfo) GetForceUpdateUrl() string {
	if x != nil {
		return x.ForceUpdateUrl
	}
	return ""
}

type StopServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StopBeginTime uint32 `protobuf:"varint,1,opt,name=stop_begin_time,json=stopBeginTime,proto3" json:"stop_begin_time,omitempty"`
	StopEndTime   uint32 `protobuf:"varint,2,opt,name=stop_end_time,json=stopEndTime,proto3" json:"stop_end_time,omitempty"`
	Url           string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	ContentMsg    string `protobuf:"bytes,4,opt,name=content_msg,json=contentMsg,proto3" json:"content_msg,omitempty"`
}

func (x *StopServerInfo) Reset() {
	*x = StopServerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopServerInfo) ProtoMessage() {}

func (x *StopServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopServerInfo.ProtoReflect.Descriptor instead.
func (*StopServerInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{3}
}

func (x *StopServerInfo) GetStopBeginTime() uint32 {
	if x != nil {
		return x.StopBeginTime
	}
	return 0
}

func (x *StopServerInfo) GetStopEndTime() uint32 {
	if x != nil {
		return x.StopEndTime
	}
	return 0
}

func (x *StopServerInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *StopServerInfo) GetContentMsg() string {
	if x != nil {
		return x.ContentMsg
	}
	return ""
}

type ResVersionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version           uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Relogin           bool   `protobuf:"varint,2,opt,name=relogin,proto3" json:"relogin,omitempty"`
	Md5               string `protobuf:"bytes,3,opt,name=md5,proto3" json:"md5,omitempty"`
	ReleaseTotalSize  string `protobuf:"bytes,4,opt,name=release_total_size,json=releaseTotalSize,proto3" json:"release_total_size,omitempty"`
	VersionSuffix     string `protobuf:"bytes,5,opt,name=version_suffix,json=versionSuffix,proto3" json:"version_suffix,omitempty"`
	Branch            string `protobuf:"bytes,6,opt,name=branch,proto3" json:"branch,omitempty"`
	NextScriptVersion string `protobuf:"bytes,7,opt,name=next_script_version,json=nextScriptVersion,proto3" json:"next_script_version,omitempty"`
}

func (x *ResVersionConfig) Reset() {
	*x = ResVersionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResVersionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResVersionConfig) ProtoMessage() {}

func (x *ResVersionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResVersionConfig.ProtoReflect.Descriptor instead.
func (*ResVersionConfig) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{4}
}

func (x *ResVersionConfig) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ResVersionConfig) GetRelogin() bool {
	if x != nil {
		return x.Relogin
	}
	return false
}

func (x *ResVersionConfig) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *ResVersionConfig) GetReleaseTotalSize() string {
	if x != nil {
		return x.ReleaseTotalSize
	}
	return ""
}

func (x *ResVersionConfig) GetVersionSuffix() string {
	if x != nil {
		return x.VersionSuffix
	}
	return ""
}

func (x *ResVersionConfig) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *ResVersionConfig) GetNextScriptVersion() string {
	if x != nil {
		return x.NextScriptVersion
	}
	return ""
}

type RegionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GateserverIp               string            `protobuf:"bytes,1,opt,name=gateserver_ip,json=gateserverIp,proto3" json:"gateserver_ip,omitempty"`
	GateserverPort             uint32            `protobuf:"varint,2,opt,name=gateserver_port,json=gateserverPort,proto3" json:"gateserver_port,omitempty"`
	PayCallbackUrl             string            `protobuf:"bytes,3,opt,name=pay_callback_url,json=payCallbackUrl,proto3" json:"pay_callback_url,omitempty"`
	AreaType                   string            `protobuf:"bytes,7,opt,name=area_type,json=areaType,proto3" json:"area_type,omitempty"`
	ResourceUrl                string            `protobuf:"bytes,8,opt,name=resource_url,json=resourceUrl,proto3" json:"resource_url,omitempty"`
	DataUrl                    string            `protobuf:"bytes,9,opt,name=data_url,json=dataUrl,proto3" json:"data_url,omitempty"`
	FeedbackUrl                string            `protobuf:"bytes,10,opt,name=feedback_url,json=feedbackUrl,proto3" json:"feedback_url,omitempty"`
	BulletinUrl                string            `protobuf:"bytes,11,opt,name=bulletin_url,json=bulletinUrl,proto3" json:"bulletin_url,omitempty"`
	ResourceUrlBak             string            `protobuf:"bytes,12,opt,name=resource_url_bak,json=resourceUrlBak,proto3" json:"resource_url_bak,omitempty"`
	DataUrlBak                 string            `protobuf:"bytes,13,opt,name=data_url_bak,json=dataUrlBak,proto3" json:"data_url_bak,omitempty"`
	ClientDataVersion          uint32            `protobuf:"varint,14,opt,name=client_data_version,json=clientDataVersion,proto3" json:"client_data_version,omitempty"`
	HandbookUrl                string            `protobuf:"bytes,16,opt,name=handbook_url,json=handbookUrl,proto3" json:"handbook_url,omitempty"`
	ClientSilenceDataVersion   uint32            `protobuf:"varint,18,opt,name=client_silence_data_version,json=clientSilenceDataVersion,proto3" json:"client_silence_data_version,omitempty"`
	ClientDataMd5              string            `protobuf:"bytes,19,opt,name=client_data_md5,json=clientDataMd5,proto3" json:"client_data_md5,omitempty"`
	ClientSilenceDataMd5       string            `protobuf:"bytes,20,opt,name=client_silence_data_md5,json=clientSilenceDataMd5,proto3" json:"client_silence_data_md5,omitempty"`
	ResVersionConfig           *ResVersionConfig `protobuf:"bytes,22,opt,name=res_version_config,json=resVersionConfig,proto3" json:"res_version_config,omitempty"`
	SecretKey                  []byte            `protobuf:"bytes,23,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	OfficialCommunityUrl       string            `protobuf:"bytes,24,opt,name=official_community_url,json=officialCommunityUrl,proto3" json:"official_community_url,omitempty"`
	ClientVersionSuffix        string            `protobuf:"bytes,26,opt,name=client_version_suffix,json=clientVersionSuffix,proto3" json:"client_version_suffix,omitempty"`
	ClientSilenceVersionSuffix string            `protobuf:"bytes,27,opt,name=client_silence_version_suffix,json=clientSilenceVersionSuffix,proto3" json:"client_silence_version_suffix,omitempty"`
	UseGateserverDomainName    bool              `protobuf:"varint,28,opt,name=use_gateserver_domain_name,json=useGateserverDomainName,proto3" json:"use_gateserver_domain_name,omitempty"`
	GateserverDomainName       string            `protobuf:"bytes,29,opt,name=gateserver_domain_name,json=gateserverDomainName,proto3" json:"gateserver_domain_name,omitempty"`
	UserCenterUrl              string            `protobuf:"bytes,30,opt,name=user_center_url,json=userCenterUrl,proto3" json:"user_center_url,omitempty"`
	AccountBindUrl             string            `protobuf:"bytes,31,opt,name=account_bind_url,json=accountBindUrl,proto3" json:"account_bind_url,omitempty"`
	CdkeyUrl                   string            `protobuf:"bytes,32,opt,name=cdkey_url,json=cdkeyUrl,proto3" json:"cdkey_url,omitempty"`
	PrivacyPolicyUrl           string            `protobuf:"bytes,33,opt,name=privacy_policy_url,json=privacyPolicyUrl,proto3" json:"privacy_policy_url,omitempty"`
	NextResourceUrl            string            `protobuf:"bytes,34,opt,name=next_resource_url,json=nextResourceUrl,proto3" json:"next_resource_url,omitempty"`
	NextResVersionConfig       *ResVersionConfig `protobuf:"bytes,35,opt,name=next_res_version_config,json=nextResVersionConfig,proto3" json:"next_res_version_config,omitempty"`
	GameBiz                    string            `protobuf:"bytes,36,opt,name=game_biz,json=gameBiz,proto3" json:"game_biz,omitempty"`
}

func (x *RegionInfo) Reset() {
	*x = RegionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionInfo) ProtoMessage() {}

func (x *RegionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionInfo.ProtoReflect.Descriptor instead.
func (*RegionInfo) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{5}
}

func (x *RegionInfo) GetGateserverIp() string {
	if x != nil {
		return x.GateserverIp
	}
	return ""
}

func (x *RegionInfo) GetGateserverPort() uint32 {
	if x != nil {
		return x.GateserverPort
	}
	return 0
}

func (x *RegionInfo) GetPayCallbackUrl() string {
	if x != nil {
		return x.PayCallbackUrl
	}
	return ""
}

func (x *RegionInfo) GetAreaType() string {
	if x != nil {
		return x.AreaType
	}
	return ""
}

func (x *RegionInfo) GetResourceUrl() string {
	if x != nil {
		return x.ResourceUrl
	}
	return ""
}

func (x *RegionInfo) GetDataUrl() string {
	if x != nil {
		return x.DataUrl
	}
	return ""
}

func (x *RegionInfo) GetFeedbackUrl() string {
	if x != nil {
		return x.FeedbackUrl
	}
	return ""
}

func (x *RegionInfo) GetBulletinUrl() string {
	if x != nil {
		return x.BulletinUrl
	}
	return ""
}

func (x *RegionInfo) GetResourceUrlBak() string {
	if x != nil {
		return x.ResourceUrlBak
	}
	return ""
}

func (x *RegionInfo) GetDataUrlBak() string {
	if x != nil {
		return x.DataUrlBak
	}
	return ""
}

func (x *RegionInfo) GetClientDataVersion() uint32 {
	if x != nil {
		return x.ClientDataVersion
	}
	return 0
}

func (x *RegionInfo) GetHandbookUrl() string {
	if x != nil {
		return x.HandbookUrl
	}
	return ""
}

func (x *RegionInfo) GetClientSilenceDataVersion() uint32 {
	if x != nil {
		return x.ClientSilenceDataVersion
	}
	return 0
}

func (x *RegionInfo) GetClientDataMd5() string {
	if x != nil {
		return x.ClientDataMd5
	}
	return ""
}

func (x *RegionInfo) GetClientSilenceDataMd5() string {
	if x != nil {
		return x.ClientSilenceDataMd5
	}
	return ""
}

func (x *RegionInfo) GetResVersionConfig() *ResVersionConfig {
	if x != nil {
		return x.ResVersionConfig
	}
	return nil
}

func (x *RegionInfo) GetSecretKey() []byte {
	if x != nil {
		return x.SecretKey
	}
	return nil
}

func (x *RegionInfo) GetOfficialCommunityUrl() string {
	if x != nil {
		return x.OfficialCommunityUrl
	}
	return ""
}

func (x *RegionInfo) GetClientVersionSuffix() string {
	if x != nil {
		return x.ClientVersionSuffix
	}
	return ""
}

func (x *RegionInfo) GetClientSilenceVersionSuffix() string {
	if x != nil {
		return x.ClientSilenceVersionSuffix
	}
	return ""
}

func (x *RegionInfo) GetUseGateserverDomainName() bool {
	if x != nil {
		return x.UseGateserverDomainName
	}
	return false
}

func (x *RegionInfo) GetGateserverDomainName() string {
	if x != nil {
		return x.GateserverDomainName
	}
	return ""
}

func (x *RegionInfo) GetUserCenterUrl() string {
	if x != nil {
		return x.UserCenterUrl
	}
	return ""
}

func (x *RegionInfo) GetAccountBindUrl() string {
	if x != nil {
		return x.AccountBindUrl
	}
	return ""
}

func (x *RegionInfo) GetCdkeyUrl() string {
	if x != nil {
		return x.CdkeyUrl
	}
	return ""
}

func (x *RegionInfo) GetPrivacyPolicyUrl() string {
	if x != nil {
		return x.PrivacyPolicyUrl
	}
	return ""
}

func (x *RegionInfo) GetNextResourceUrl() string {
	if x != nil {
		return x.NextResourceUrl
	}
	return ""
}

func (x *RegionInfo) GetNextResVersionConfig() *ResVersionConfig {
	if x != nil {
		return x.NextResVersionConfig
	}
	return nil
}

func (x *RegionInfo) GetGameBiz() string {
	if x != nil {
		return x.GameBiz
	}
	return ""
}

type QueryCurrRegionHttpRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode                           int32       `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	Msg                               string      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	RegionInfo                        *RegionInfo `protobuf:"bytes,3,opt,name=region_info,json=regionInfo,proto3" json:"region_info,omitempty"`
	ClientSecretKey                   []byte      `protobuf:"bytes,11,opt,name=client_secret_key,json=clientSecretKey,proto3" json:"client_secret_key,omitempty"`
	RegionCustomConfigEncrypted       []byte      `protobuf:"bytes,12,opt,name=region_custom_config_encrypted,json=regionCustomConfigEncrypted,proto3" json:"region_custom_config_encrypted,omitempty"`
	ClientRegionCustomConfigEncrypted []byte      `protobuf:"bytes,13,opt,name=client_region_custom_config_encrypted,json=clientRegionCustomConfigEncrypted,proto3" json:"client_region_custom_config_encrypted,omitempty"`
	ConnectGateTicket                 string      `protobuf:"bytes,14,opt,name=connect_gate_ticket,json=connectGateTicket,proto3" json:"connect_gate_ticket,omitempty"`
	// Types that are assignable to Detail:
	//
	//	*QueryCurrRegionHttpRsp_ForceUpdate
	//	*QueryCurrRegionHttpRsp_StopServer
	Detail isQueryCurrRegionHttpRsp_Detail `protobuf_oneof:"detail"`
}

func (x *QueryCurrRegionHttpRsp) Reset() {
	*x = QueryCurrRegionHttpRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_define_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCurrRegionHttpRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCurrRegionHttpRsp) ProtoMessage() {}

func (x *QueryCurrRegionHttpRsp) ProtoReflect() protoreflect.Message {
	mi := &file_define_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCurrRegionHttpRsp.ProtoReflect.Descriptor instead.
func (*QueryCurrRegionHttpRsp) Descriptor() ([]byte, []int) {
	return file_define_proto_rawDescGZIP(), []int{6}
}

func (x *QueryCurrRegionHttpRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *QueryCurrRegionHttpRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *QueryCurrRegionHttpRsp) GetRegionInfo() *RegionInfo {
	if x != nil {
		return x.RegionInfo
	}
	return nil
}

func (x *QueryCurrRegionHttpRsp) GetClientSecretKey() []byte {
	if x != nil {
		return x.ClientSecretKey
	}
	return nil
}

func (x *QueryCurrRegionHttpRsp) GetRegionCustomConfigEncrypted() []byte {
	if x != nil {
		return x.RegionCustomConfigEncrypted
	}
	return nil
}

func (x *QueryCurrRegionHttpRsp) GetClientRegionCustomConfigEncrypted() []byte {
	if x != nil {
		return x.ClientRegionCustomConfigEncrypted
	}
	return nil
}

func (x *QueryCurrRegionHttpRsp) GetConnectGateTicket() string {
	if x != nil {
		return x.ConnectGateTicket
	}
	return ""
}

func (m *QueryCurrRegionHttpRsp) GetDetail() isQueryCurrRegionHttpRsp_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *QueryCurrRegionHttpRsp) GetForceUpdate() *ForceUpdateInfo {
	if x, ok := x.GetDetail().(*QueryCurrRegionHttpRsp_ForceUpdate); ok {
		return x.ForceUpdate
	}
	return nil
}

func (x *QueryCurrRegionHttpRsp) GetStopServer() *StopServerInfo {
	if x, ok := x.GetDetail().(*QueryCurrRegionHttpRsp_StopServer); ok {
		return x.StopServer
	}
	return nil
}

type isQueryCurrRegionHttpRsp_Detail interface {
	isQueryCurrRegionHttpRsp_Detail()
}

type QueryCurrRegionHttpRsp_ForceUpdate struct {
	ForceUpdate *ForceUpdateInfo `protobuf:"bytes,4,opt,name=force_update,json=forceUpdate,proto3,oneof"`
}

type QueryCurrRegionHttpRsp_StopServer struct {
	StopServer *StopServerInfo `protobuf:"bytes,5,opt,name=stop_server,json=stopServer,proto3,oneof"`
}

func (*QueryCurrRegionHttpRsp_ForceUpdate) isQueryCurrRegionHttpRsp_Detail() {}

func (*QueryCurrRegionHttpRsp_StopServer) isQueryCurrRegionHttpRsp_Detail() {}

var File_define_proto protoreflect.FileDescriptor

var file_define_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x73,
	0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x55, 0x72, 0x6c, 0x22, 0xff, 0x01, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x74, 0x74, 0x70, 0x52, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x1e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x1b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x63,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x50, 0x63, 0x22, 0x3b, 0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x72, 0x6c, 0x22, 0x8f, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x73, 0x74, 0x6f, 0x70, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x4d, 0x73, 0x67, 0x22, 0xf5, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x64, 0x35, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12,
	0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x13,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x0a, 0x0a,
	0x0a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x67,
	0x61, 0x74, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x67, 0x61, 0x74, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70,
	0x12, 0x27, 0x0a, 0x0f, 0x67, 0x61, 0x74, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x79,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x21,
	0x0a, 0x0c, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72,
	0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x69,
	0x6e, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x62, 0x61, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x42, 0x61, 0x6b, 0x12, 0x20,
	0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x62, 0x61, 0x6b, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x55, 0x72, 0x6c, 0x42, 0x61, 0x6b,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x6f, 0x6b,
	0x55, 0x72, 0x6c, 0x12, 0x3d, 0x0a, 0x1b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6d, 0x64, 0x35, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x64, 0x35, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6d, 0x64, 0x35, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x64,
	0x35, 0x12, 0x3f, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x52, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x10, 0x72, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x41, 0x0a, 0x1d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x3b,
	0x0a, 0x1a, 0x75, 0x73, 0x65, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x75, 0x73, 0x65, 0x47, 0x61, 0x74, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x67,
	0x61, 0x74, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x67, 0x61, 0x74,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72,
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x69, 0x6e, 0x64,
	0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x64, 0x6b, 0x65, 0x79, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x64, 0x6b, 0x65, 0x79, 0x55, 0x72, 0x6c,
	0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x2a,
	0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x48, 0x0a, 0x17, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x65,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x14,
	0x6e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x69, 0x7a,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x42, 0x69, 0x7a, 0x22,
	0xda, 0x03, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x75, 0x72, 0x72, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2c, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x43, 0x0a, 0x1e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x25, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x21, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x47, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x32,
	0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2a, 0xd7, 0x02, 0x0a,
	0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x48, 0x4f, 0x59, 0x4f, 0x5f, 0x47,
	0x55, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x4d, 0x49, 0x48, 0x4f, 0x59, 0x4f, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x58, 0x49, 0x41, 0x4f, 0x4d, 0x49, 0x10, 0x0b, 0x12, 0x13,
	0x0a, 0x0f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x50, 0x41,
	0x44, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x59,
	0x59, 0x42, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x42, 0x49, 0x4c, 0x49, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x48, 0x55, 0x41, 0x57, 0x45, 0x49, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x49, 0x5a, 0x55, 0x10, 0x10, 0x12, 0x0f, 0x0a,
	0x0b, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x33, 0x36, 0x30, 0x10, 0x11, 0x12, 0x10,
	0x0a, 0x0c, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4f, 0x50, 0x50, 0x4f, 0x10, 0x12,
	0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x56, 0x49, 0x56, 0x4f,
	0x10, 0x13, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x55, 0x43,
	0x10, 0x14, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x57, 0x41,
	0x4e, 0x44, 0x4f, 0x4a, 0x49, 0x41, 0x10, 0x15, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x4e, 0x4f, 0x56, 0x4f, 0x10, 0x16, 0x12, 0x11, 0x0a, 0x0d,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4a, 0x49, 0x4e, 0x4c, 0x49, 0x10, 0x17, 0x12,
	0x11, 0x0a, 0x0d, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x49, 0x44, 0x55,
	0x10, 0x19, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x41,
	0x4e, 0x47, 0x4c, 0x45, 0x10, 0x1a, 0x2a, 0xeb, 0x02, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x49, 0x48, 0x4f,
	0x59, 0x4f, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x49, 0x44, 0x5f, 0x58, 0x49, 0x41, 0x4f, 0x4d, 0x49, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x50, 0x41,
	0x44, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49,
	0x44, 0x5f, 0x59, 0x59, 0x42, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x49, 0x4c, 0x49, 0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x55, 0x41, 0x57, 0x45,
	0x49, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49,
	0x44, 0x5f, 0x4d, 0x45, 0x49, 0x5a, 0x55, 0x10, 0x10, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x33, 0x36, 0x30, 0x10, 0x11, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x50, 0x50, 0x4f,
	0x10, 0x12, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44,
	0x5f, 0x56, 0x49, 0x56, 0x4f, 0x10, 0x13, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x43, 0x10, 0x14, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x45, 0x4e, 0x4f, 0x56, 0x4f, 0x10,
	0x16, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f,
	0x4a, 0x49, 0x4e, 0x4c, 0x49, 0x10, 0x17, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x49, 0x44, 0x55, 0x10, 0x19, 0x12, 0x15, 0x0a,
	0x11, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x4e, 0x47,
	0x4c, 0x45, 0x10, 0x1a, 0x2a, 0xa0, 0x02, 0x0a, 0x0c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47,
	0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e,
	0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x43, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x43, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4c,
	0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x52, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x10, 0x05, 0x12, 0x0f, 0x0a,
	0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x53, 0x10, 0x06, 0x12, 0x0f,
	0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x54, 0x10, 0x07, 0x12,
	0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x55, 0x10, 0x08,
	0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4a, 0x50, 0x10,
	0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4b, 0x52,
	0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x48, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x56, 0x4e, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x49, 0x44, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x52, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x49, 0x54, 0x10, 0x0f, 0x2a, 0xea, 0x01, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x44, 0x49, 0x54,
	0x4f, 0x52, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4f, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x43,
	0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x53, 0x34, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x4f, 0x55, 0x44,
	0x5f, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x49, 0x4f, 0x53, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x53, 0x35,
	0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x10,
	0x09, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x54, 0x56, 0x10, 0x0a, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0x0b, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50, 0x43, 0x10, 0x0c, 0x12, 0x1c, 0x0a, 0x18,
	0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x54, 0x48, 0x49, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x59, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x0d, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x54, 0x48, 0x49, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f,
	0x50, 0x43, 0x10, 0x0e, 0x42, 0x1d, 0x5a, 0x1b, 0x79, 0x73, 0x2d, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_define_proto_rawDescOnce sync.Once
	file_define_proto_rawDescData = file_define_proto_rawDesc
)

func file_define_proto_rawDescGZIP() []byte {
	file_define_proto_rawDescOnce.Do(func() {
		file_define_proto_rawDescData = protoimpl.X.CompressGZIP(file_define_proto_rawDescData)
	})
	return file_define_proto_rawDescData
}

var file_define_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_define_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_define_proto_goTypes = []interface{}{
	(AccountType)(0),               // 0: AccountType
	(ChannelIdType)(0),             // 1: ChannelIdType
	(LanguageType)(0),              // 2: LanguageType
	(PlatformType)(0),              // 3: PlatformType
	(*RegionSimpleInfo)(nil),       // 4: RegionSimpleInfo
	(*QueryRegionListHttpRsp)(nil), // 5: QueryRegionListHttpRsp
	(*ForceUpdateInfo)(nil),        // 6: ForceUpdateInfo
	(*StopServerInfo)(nil),         // 7: StopServerInfo
	(*ResVersionConfig)(nil),       // 8: ResVersionConfig
	(*RegionInfo)(nil),             // 9: RegionInfo
	(*QueryCurrRegionHttpRsp)(nil), // 10: QueryCurrRegionHttpRsp
}
var file_define_proto_depIdxs = []int32{
	4, // 0: QueryRegionListHttpRsp.region_list:type_name -> RegionSimpleInfo
	8, // 1: RegionInfo.res_version_config:type_name -> ResVersionConfig
	8, // 2: RegionInfo.next_res_version_config:type_name -> ResVersionConfig
	9, // 3: QueryCurrRegionHttpRsp.region_info:type_name -> RegionInfo
	6, // 4: QueryCurrRegionHttpRsp.force_update:type_name -> ForceUpdateInfo
	7, // 5: QueryCurrRegionHttpRsp.stop_server:type_name -> StopServerInfo
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_define_proto_init() }
func file_define_proto_init() {
	if File_define_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_define_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionSimpleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRegionListHttpRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceUpdateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopServerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResVersionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_define_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCurrRegionHttpRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_define_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*QueryCurrRegionHttpRsp_ForceUpdate)(nil),
		(*QueryCurrRegionHttpRsp_StopServer)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_define_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_define_proto_goTypes,
		DependencyIndexes: file_define_proto_depIdxs,
		EnumInfos:         file_define_proto_enumTypes,
		MessageInfos:      file_define_proto_msgTypes,
	}.Build()
	File_define_proto = out.File
	file_define_proto_rawDesc = nil
	file_define_proto_goTypes = nil
	file_define_proto_depIdxs = nil
}
